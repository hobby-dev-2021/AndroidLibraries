package com.hobbydev.testlibraries.theme.ui

import androidx.compose.ui.graphics.Color

// === LIGHT THEME ===
// Blu scuro come colore primario (richiama serietà e affidabilità per l'apprendimento)
val primaryLight = Color(0xFF1565C0)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFBBDEFB)
val onPrimaryContainerLight = Color(0xFF0D47A1)

// Verde foresta come secondario (natura, crescita, apprendimento)
val secondaryLight = Color(0xFF2E7D32)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFC8E6C9)
val onSecondaryContainerLight = Color(0xFF1B5E20)

// Arancione caldo per elementi interattivi e highlight
val tertiaryLight = Color(0xFFFF9800)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFFFE0B2)
val onTertiaryContainerLight = Color(0xFFE65100)

// Rosso morbido per errori
val errorLight = Color(0xFFE53935)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFEBEE)
val onErrorContainerLight = Color(0xFFB71C1C)

// Superficie pulita e leggibile
val backgroundLight = Color(0xFFFAFAFA)
val onBackgroundLight = Color(0xFF1A1A1A)
val surfaceLight = Color(0xFFFFFFFF)
val onSurfaceLight = Color(0xFF1A1A1A)
val surfaceVariantLight = Color(0xFFF5F5F5)
val onSurfaceVariantLight = Color(0xFF424242)
val outlineLight = Color(0xFF9E9E9E)
val outlineVariantLight = Color(0xFFE0E0E0)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF2C2C2C)
val inverseOnSurfaceLight = Color(0xFFF5F5F5)
val inversePrimaryLight = Color(0xFF90CAF9)
val surfaceDimLight = Color(0xFFE8E8E8)
val surfaceBrightLight = Color(0xFFFFFFFF)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFFCFCFC)
val surfaceContainerLight = Color(0xFFF8F8F8)
val surfaceContainerHighLight = Color(0xFFF3F3F3)
val surfaceContainerHighestLight = Color(0xFFEEEEEE)

// === MEDIUM CONTRAST LIGHT ===
val primaryLightMediumContrast = Color(0xFF0D47A1)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF1976D2)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF1B5E20)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF388E3C)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFFE65100)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFFFFA726)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFFB71C1C)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFEF5350)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFFAFAFA)
val onBackgroundLightMediumContrast = Color(0xFF1A1A1A)
val surfaceLightMediumContrast = Color(0xFFFFFFFF)
val onSurfaceLightMediumContrast = Color(0xFF0A0A0A)
val surfaceVariantLightMediumContrast = Color(0xFFF5F5F5)
val onSurfaceVariantLightMediumContrast = Color(0xFF2C2C2C)
val outlineLightMediumContrast = Color(0xFF757575)
val outlineVariantLightMediumContrast = Color(0xFFBDBDBD)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF2C2C2C)
val inverseOnSurfaceLightMediumContrast = Color(0xFFF5F5F5)
val inversePrimaryLightMediumContrast = Color(0xFF90CAF9)
val surfaceDimLightMediumContrast = Color(0xFFDDDDDD)
val surfaceBrightLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFFCFCFC)
val surfaceContainerLightMediumContrast = Color(0xFFF3F3F3)
val surfaceContainerHighLightMediumContrast = Color(0xFFEEEEEE)
val surfaceContainerHighestLightMediumContrast = Color(0xFFE8E8E8)

// === HIGH CONTRAST LIGHT ===
val primaryLightHighContrast = Color(0xFF0A3D91)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF0D47A1)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF0F4C13)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF1B5E20)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFFBF3900)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFFE65100)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF8B0000)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFFB71C1C)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFFAFAFA)
val onBackgroundLightHighContrast = Color(0xFF1A1A1A)
val surfaceLightHighContrast = Color(0xFFFFFFFF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFF5F5F5)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF424242)
val outlineVariantLightHighContrast = Color(0xFF616161)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF2C2C2C)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFF90CAF9)
val surfaceDimLightHighContrast = Color(0xFFD0D0D0)
val surfaceBrightLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF8F8F8)
val surfaceContainerLightHighContrast = Color(0xFFEEEEEE)
val surfaceContainerHighLightHighContrast = Color(0xFFE3E3E3)
val surfaceContainerHighestLightHighContrast = Color(0xFFD8D8D8)

// === DARK THEME ===
// Mantenimento della coerenza ma adattato per il tema scuro
val primaryDark = Color(0xFF90CAF9)
val onPrimaryDark = Color(0xFF0D47A1)
val primaryContainerDark = Color(0xFF1976D2)
val onPrimaryContainerDark = Color(0xFFE3F2FD)

val secondaryDark = Color(0xFFA5D6A7)
val onSecondaryDark = Color(0xFF1B5E20)
val secondaryContainerDark = Color(0xFF2E7D32)
val onSecondaryContainerDark = Color(0xFFE8F5E8)

val tertiaryDark = Color(0xFFFFCC80)
val onTertiaryDark = Color(0xFFE65100)
val tertiaryContainerDark = Color(0xFFFF9800)
val onTertiaryContainerDark = Color(0xFFFFF3E0)

val errorDark = Color(0xFFEF9A9A)
val onErrorDark = Color(0xFFB71C1C)
val errorContainerDark = Color(0xFFE53935)
val onErrorContainerDark = Color(0xFFFFEBEE)

val backgroundDark = Color(0xFF121212)
val onBackgroundDark = Color(0xFFE0E0E0)
val surfaceDark = Color(0xFF1E1E1E)
val onSurfaceDark = Color(0xFFE0E0E0)
val surfaceVariantDark = Color(0xFF424242)
val onSurfaceVariantDark = Color(0xFFBDBDBD)
val outlineDark = Color(0xFF757575)
val outlineVariantDark = Color(0xFF424242)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE0E0E0)
val inverseOnSurfaceDark = Color(0xFF2C2C2C)
val inversePrimaryDark = Color(0xFF1565C0)
val surfaceDimDark = Color(0xFF121212)
val surfaceBrightDark = Color(0xFF383838)
val surfaceContainerLowestDark = Color(0xFF0A0A0A)
val surfaceContainerLowDark = Color(0xFF1A1A1A)
val surfaceContainerDark = Color(0xFF202020)
val surfaceContainerHighDark = Color(0xFF2A2A2A)
val surfaceContainerHighestDark = Color(0xFF353535)

// === MEDIUM CONTRAST DARK ===
val primaryDarkMediumContrast = Color(0xFFBBDEFB)
val onPrimaryDarkMediumContrast = Color(0xFF0A3D91)
val primaryContainerDarkMediumContrast = Color(0xFF42A5F5)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFC8E6C9)
val onSecondaryDarkMediumContrast = Color(0xFF0F4C13)
val secondaryContainerDarkMediumContrast = Color(0xFF66BB6A)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFFFE0B2)
val onTertiaryDarkMediumContrast = Color(0xFFBF3900)
val tertiaryContainerDarkMediumContrast = Color(0xFFFFB74D)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFCDD2)
val onErrorDarkMediumContrast = Color(0xFF8B0000)
val errorContainerDarkMediumContrast = Color(0xFFE57373)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF121212)
val onBackgroundDarkMediumContrast = Color(0xFFE0E0E0)
val surfaceDarkMediumContrast = Color(0xFF1E1E1E)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF424242)
val onSurfaceVariantDarkMediumContrast = Color(0xFFE0E0E0)
val outlineDarkMediumContrast = Color(0xFF9E9E9E)
val outlineVariantDarkMediumContrast = Color(0xFF757575)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE0E0E0)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF2A2A2A)
val inversePrimaryDarkMediumContrast = Color(0xFF1976D2)
val surfaceDimDarkMediumContrast = Color(0xFF121212)
val surfaceBrightDarkMediumContrast = Color(0xFF444444)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF050505)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1C1C1C)
val surfaceContainerDarkMediumContrast = Color(0xFF262626)
val surfaceContainerHighDarkMediumContrast = Color(0xFF303030)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3B3B3B)

// === HIGH CONTRAST DARK ===
val primaryDarkHighContrast = Color(0xFFE3F2FD)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFF90CAF9)
val onPrimaryContainerDarkHighContrast = Color(0xFF0A0A0A)
val secondaryDarkHighContrast = Color(0xFFE8F5E8)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFA5D6A7)
val onSecondaryContainerDarkHighContrast = Color(0xFF0A0A0A)
val tertiaryDarkHighContrast = Color(0xFFFFF3E0)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFFFCC80)
val onTertiaryContainerDarkHighContrast = Color(0xFF0A0A0A)
val errorDarkHighContrast = Color(0xFFFFF8F7)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFEF9A9A)
val onErrorContainerDarkHighContrast = Color(0xFF0A0A0A)
val backgroundDarkHighContrast = Color(0xFF121212)
val onBackgroundDarkHighContrast = Color(0xFFE0E0E0)
val surfaceDarkHighContrast = Color(0xFF1E1E1E)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF424242)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFE0E0E0)
val outlineVariantDarkHighContrast = Color(0xFFBDBDBD)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE0E0E0)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF1976D2)
val surfaceDimDarkHighContrast = Color(0xFF121212)
val surfaceBrightDarkHighContrast = Color(0xFF505050)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF202020)
val surfaceContainerDarkHighContrast = Color(0xFF2C2C2C)
val surfaceContainerHighDarkHighContrast = Color(0xFF383838)
val surfaceContainerHighestDarkHighContrast = Color(0xFF454545)